(include "yuck/notch.yuck")
;; Variables
(defpoll clock_time :interval "1m" "date +\%H")
(defpoll clock_minute :interval "5s" "date +\%M")
(defpoll clock_date :interval "10h" "date '+%Y/%m/%d'")
(defpoll volume_percent :interval "3s" "wpctl get-volume @DEFAULT_AUDIO_SINK@ | awk -F \": \" '{print $2}'")
(defpoll memory :interval "15s" "scripts/memory")
(defpoll memory_used_mb :interval "2m" "scripts/mem-ad used")
(defpoll memory_total_mb :interval "2m" "scripts/mem-ad total")
(defpoll memory_free_mb :interval "2m" "scripts/mem-ad free")
(defvar vol_reveal false)
(defvar music_reveal false)
(defvar wifi_rev false)
(defvar time_rev false)
(deflisten workspace "scripts/workspaces")
(defvar br_reveal false)
(defpoll brightness_percent :interval "5s" "brightnessctl -m -d intel_backlight | awk -F \",\" '{print $4}' | tr -d '%'")
(defpoll battery :interval "15s" "./scripts/battery --bat")
(defpoll battery_status :interval "1m" "./scripts/battery --bat-st")

(defvar ssid "")

(defvar tray_icon '')



(defvar eww "`which eww` -c /home/binhnguyen/.config/eww/")

(defpoll song :interval "1s" "playerctl --player=spotify metadata xesam:title" )
(defpoll song_status :interval "1s" "playerctl --player=spotify status")
(defpoll cover_art :interval "1s"  "scripts/spotity/spotify-artwork.sh")

(defpoll calendar_day :interval "20h" "date '+%d'")
(defpoll calendar_year :interval "20h" "date '+%Y'")

(defwidget bat []
		(box :class "bat_module" :vexpand "false" :hexpand "false" 
            (circular-progress :value battery
                :class "batbar"
                :thickness 4
            (button 
                :class "iconbat"
                :limit-width 2
                :tooltip "battery on ${battery}%"
                :onclick "$HOME/.config/eww/scripts/pop system"
                :wrap false
                ""))))


(defwidget bright []
  (eventbox :onhover "${eww} update br_reveal=true" :onhoverlost "${eww} update br_reveal=false"
  (box :class "module-2" :space-evenly "false" :orientation "h" :spacing "3" 
    (label :text "" :class "bright_icon" :tooltip "brightness")
	(revealer :transition "slideleft"
			  :reveal br_reveal
			  :duration "350ms"
	(scale    :class "brightbar"
			  :value brightness_percent
			  :orientation "h"
			  :tooltip "${brightness_percent}"
			  :max 100
			  :min 0
			  :onchange "brightnessctl set {}%" )))))




;; widgets
(defwidget powermenu_botton []
    (eventbox :cursor "pointer"
        (box :class "powermenu_botton" :vexpand: false :hexpand: false
          (button :onclick "eww open-many --toggle powermenu" ""))))

(defwidget workspaces []
    (literal :content workspace))

(defwidget mem []
  (box :class "mem_module" :vexpand false :hexpand false
    (circular-progress :value memory
      :class "membar"
      :thickness 4
      (eventbox
        :cursor "pointer"
        :onclick "eww open-many --toggle system"
        (label
          :class "iconmem"
          :limit-width 2
          :tooltip "using ${memory}% ram"
          :show_truncated false
          :wrap false
          :text "")))))

(defwidget sep []
  (box :class "module-2" :vexpand false :hexpand false
    (label :class "separ" :text "|")))

(defwidget clock_module []
  (eventbox :onhover "eww update time_rev=true"
        :onhoverlost "eww update time_rev=false"
        :cursor "pointer"
    (box :class "module" :space-evenly false :orientation "h" :spacing "3"
      (label :text clock_time :class "clock_time_class")
      (label :text "󰇙" :class "clock_time_sep")
      (label :text clock_minute :class "clock_minute_class")
     (revealer :transition "slideleft"
      :reveal time_rev
      :duration "350ms"
      (button :class "clock_date_class"
             :onclick "eww open-many --toggle calendar" clock_date)))))

(defwidget tray []
  (eventbox
    :cursor "pointer" :onclick "scripts/toggle_tray"
    (label
      :class "tray_icon"
      :text "${tray_icon}")))

(defwidget volume []
  (eventbox :onhover "eww update vol_reveal=true"
        :onhoverlost "eww update vol_reveal=false"
        :cursor "pointer"
   (box :space-evenly false :orientation "h" :spacing "3"
    (button :onclick "pwvucontrol" :class "volume_icon" "")
    (revealer :transition "slideleft"
       :reveal vol_reveal
       :duration "350ms"
     (scale :class "volbar"
        :value {volume_percent*100}
        :orientation "h"
        :tooltip "${volume_percent*100}"
        :max 100
        :min 0
        :onchange "wpctl set-volume @DEFAULT_AUDIO_SINK@ {}%")))))
  ;;  Music
(defwidget music []
  (eventbox :onhover "eww update music_reveal=true "
        :onhoverlost "eww update music_reveal=false "
        :cursor "pointer"
        :onclick "eww open-many --toggle player"
    (box :class "module-2" :orientation "h" :space-evenly false :vexpand false :hexpand false
     (box :class "song_cover_art" :vexpand false :hexpand false :style "background-image: url('${cover_art}');")
     (label :class "song" :wrap true :text song)
     ))) 
  



(defwidget right []
  (box :orientation "h"
       :space-evenly false
       :halign "end"
   (tray)
   (sep)
   (bright)
   (volume)
   (wifi)
   (sep)
   (bat)
   (mem)
   (sep)
   (clock_module)))

(defwidget left []
  (box :orientation "h"
       :space-evenly false
       :halign "start"
   (powermenu_botton)
   (sep)
   ))

(defwidget center []
  (box :orientation "h"
   :space-evenly false
      :halign "center"
   :class "center_modules"
   (music)))

(defwindow bar
:monitor 0
    :geometry (geometry :x "0%"
                        :y "7px"
                        :width "98%"
                        :height "35px"
                        :anchor "top center")
    :exclusive true
    :windowtype "desktop"
    (box :class "bar_class" :orientation "h"
     (left)
     (center)
     (right)))

(defwidget system []
  (box :class "sys_win" :orientation "v" :space-evenly false :hexpand false :vexpand false :spacing 0
   (box :class "sys_box" :orientation "h" :space-evenly false
       (box :orientation "v" :space-evenly false :spacing 0 :hexpand false :vexpand false))
   (label :text "" :class "sys_sep" :halign "center")
   (box :class "sys_mem_box" :orientation "h" :space-evenly false :halign "start"
       (circular-progress :value memory
                 :class "sys_mem"
                 :thickness 9
             (label :text ""
                 :class "sys_icon_mem"
                 :limit-width 2
                 :show_truncated false
                 :wrap false
                 :angle 0.0))
       (box :orientation "v" :space-evenly false :spacing 0 :hexpand false :vexpand false
        (label :text "memory"
            :halign "start"
            :class "sys_text_mem"
            :limit-width 9
            :show_truncated false
            :wrap false)
        (label :text "${memory_used_mb}|${memory_total_mb}mb "
            :halign "start"
            :class "sys_text_mem_sub"
            :limit-width 22
            :show_truncated false
            :wrap false)
        (label :text "${memory_free_mb}mb free"
            :halign "start"
            :class "sys_text_mem_sub"
            :limit-width 22
            :show_truncated false
            :wrap false)))))

(defwidget cal []
  (box :class "cal" :orientation "v"
   (box :class "cal-in"
    (calendar :class "cal"
       :day calendar_day
       :year calendar_year))))

(defwindow calendar
  :geometry (geometry :x "-20px"
             :y "7%"
             :anchor "top right"
             :width "270px"
             :height "60px")
 (cal))

(defwindow system
  :geometry (geometry :x "-20px"
             :y "7%"
             :anchor "top right"
             :width "290px"
             :height "120px")
  (system))
